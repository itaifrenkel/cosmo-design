define install_service
    concurrency
       sequence tag: load_balancers_ready
           concurrent_iterator times: ${scale.load_balancer_instances}
               start_appliance appliance: ${appliances.load_balancer_appliance}

       concurrent_iterator times: ${scale.web_instances}
           sequence
               start_appliance appliance: ${appliances.web_appliance}
               _deploy_war_modules_on_web_appliance
               _add_web_appliance_to_load_balancers await: load_balancers_ready

define deploy_war_modules
    sequence
        list_aggregated_appliances appliance: ${web_appliance}
        concurrent_iterator from: ${appliances} to_f: appliance
            sequence
                appliance exec: wait_for_state, state: 'ready'
                _deploy_war_modules_on_web_appliance

define _deploy_war_modules_on_web_appliance
    concurrent_iterator on: ${war_modules}, to_f: war_module, mt: ignore
        sequence
            list_network_wiring from: ${war_module}
            concurrent_iterator on: ${network_wiring}, to_f: w, mt: ignore
                sequence
                    add_security_group_rule, if: ${w.policies.open_firewall}
                    _await_endpoints, if: ${w.policies.wait_for_single_endpoint_before_start}
            appliance exec: deploy_war, war_module: ${war_module}

define _await_endpoints
    concurrent_iterator on: ${network_wiring}', to_f: 'w', mt: ignore
        endpoint exec: wait_for_state, endpoint: ${w.endpoint}, state:'ready'

define scale_out
    sequence
        update_plan
        get_appliances_planned_for_start
        concurrent_iterator from: ${appliances} to_f: appliance
            start_web_appliance

define scale_in
    sequence
        update_plan
        repeat
            get_appliances_planned_for_stop
            _break if: ${!appliances}
            set to_f: appliance, value: ${appliances.0}
            gracefully_stop_web_appliance

define on_appliance_failed
    sequence
        given
            that "${appliance.type} == load_balancer"
                recover_load_balancer
            that "${appliance.type} == web_appliance"
                recover_web_appliance

define _add_web_appliance_to_load_balancers
    sequence
        set to_f: web_appliance, value: ${appliance}
        get_load_balancer_appliances
        concurrent_iterator from: ${appliances}, to_f: appliance
            appliance exec: add_web_server

define _remove_web_appliance_from_load_balancers
    sequence
        set to_f: web_appliance, value: ${appliance}
        get_load_balancer_appliances
        concurrent_iterator from: ${appliances}, to_f: appliance
            appliance exec: remove_web_server


define _recover_web_appliance
    _restart_web_server_process timeout: 10s,
                                on_timeout: restart_web_appliance,
                                on_error:   restart_web_appliance

define _replace_web_appliance
    concurrence
        _terminate_web_appliance appliance: ${old_web_appliance}
        _start_web_appliance appliance: ${new_web_appliance}

define _terminate_web_appliance
    sequence
        _stop_web_appliance
        _terminate_appliance

define restart_web_server_process
    sequence
        _remove_web_appliance_from_load_balancers
        appliance exec: restart_web_server
        _add_web_appliance_to_load_balancers_gracefully

define stop_web_appliance_gracefully
    sequence
        _add_web_appliance_to_load_balancers drain: true
        sleep '60s' if: ${draining}
        stop_web_appliance

define stop_web_appliance
    sequence
        remove_web_server_from_load_balancers
        stop_appliance

define _start_web_appliance
    sequence
        start_appliance
        _deploy_war_modules_on_web_appliance
        _add_web_appliance_to_load_balancers_gracefully

end


define add_web_appliance_to_load_balancers_gracefully
    sequence
        _if ${!appliance.warmed_up}
            sequence
                _add_web_appliance_to_load_balancers throttle: low
                appliance exec: await_warmed_up

        _add_web_appliance_to_load_balancers throttle: high
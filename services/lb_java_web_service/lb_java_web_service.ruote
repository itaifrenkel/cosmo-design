# starts load balancer and web appliances, deploys war modules
define install_service
    concurrency
       concurrent_iterator times: ${scale.load_balancer_instances}, tag: load_balancers_ready
           appliance exec: start_appliance, appliance: ${appliances.load_balancer_appliance}

       concurrent_iterator times: ${scale.web_instances}
           sequence
               appliance exec: start_appliance, appliance: ${appliances.web_appliance}
               _deploy_war_modules_on_web_appliance
               _add_web_appliance_to_load_balancers await: load_balancers_ready

# adds the specified war_module to the list of war modules
# deploys the new war_module on all web appliances.
# input
#    war_module - the new war module to deploy
define deploy_war_module
    sequence
        service exec: add_aggregated_resource, resources: war_modules, value: ${war_module}
        service exec: list_aggregated_appliances, appliance: ${web_appliance}
        concurrent_iterator from: ${appliances}, to_f: appliance, mt: ignore
            sequence
                appliance exec: wait_for_state, state: 'ready'
                appliance exec: add_aggregated_resource, resources: war_modules, value: ${war_module}
                appliance exec: list_aggregated_resources, resources: war_modules, state: not_deployed
                _deploy_war_modules_on_web_appliance

# deploys war_modules on the appliance
# enforces open_firewall, wait_for_single_endpoint policies
# input
#   appliance
#   war_modules
define _deploy_war_modules_on_web_appliance
    concurrent_iterator on: ${war_modules}, to_f: war_module, mt: ignore
        sequence
            service exec: list_network_wiring, from: ${war_module}
            concurrent_iterator on: ${network_wiring}, to_f: w, mt: ignore
                sequence
                    service exec:open_firewall, if: ${w.policies.open_firewall}
                    service exec:wait_for_single_endpoint, if: ${w.policies.wait_for_single_endpoint_before_start}
            appliance exec: deploy_war, war_module: ${war_module}

define on_appliance_failed
    sequence
        given
            that "${appliance.type} == load_balancer"
                _recover_load_balancer
            that "${appliance.type} == web_appliance"
                _recover_web_appliance

# updates planned number of instances and starts new web appliances
define scale_out
    sequence
        service exec:update_scale_plan
        service exec:get_appliances_planned_for_start
        concurrent_iterator from: ${appliances} to_f: appliance
            _start_web_appliance

#updates planned number of instances and stops web appliances
define scale_in
    sequence
        service exec:update_scale_plan
        repeat
            service exec:get_appliances_planned_for_stop
            _break if: ${!appliances}
            set to_f: appliance, value: ${appliances.0}
            stop_web_appliance_gracefully

# adds the specified web appliance to all load balancers
# input
#     appliance - the web appliance to add
define _add_web_appliance_to_load_balancers
    sequence
        set to_f: web_appliance, value: ${appliance}
        service exec: get_load_balancer_appliances
        concurrent_iterator from: ${appliances}, to_f: appliance
            appliance exec: add_web_server

# removes the specified web appliance from all load balancers
# input
#     appliance - the web appliance to remove
define _remove_web_appliance_from_load_balancers
    sequence
        set to_f: web_appliance, value: ${appliance}
        get_load_balancer_appliances
        concurrent_iterator from: ${appliances}, to_f: appliance
            appliance exec: remove_web_server


define _recover_web_appliance
    _restart_web_server_process timeout: 10s,
                                on_timeout: _restart_web_appliance,
                                on_error:   _restart_web_appliance

define _replace_web_appliance
    concurrence
        _terminate_web_appliance appliance: ${old_web_appliance}
        _start_web_appliance appliance: ${new_web_appliance}

define _terminate_web_appliance
    sequence
        _stop_web_appliance
        _terminate_appliance

define _restart_web_server_process
    sequence
        _remove_web_appliance_from_load_balancers
        appliance exec: restart_web_server
        _add_web_appliance_to_load_balancers_gracefully

define _stop_web_appliance_gracefully
    sequence
        _add_web_appliance_to_load_balancers drain: true
        sleep '60s' if: ${draining}
        stop_web_appliance

define _stop_web_appliance
    sequence
        remove_web_server_from_load_balancers
        stop_appliance

define _start_web_appliance
    sequence
        start_appliance
        _deploy_war_modules_on_web_appliance
        _add_web_appliance_to_load_balancers_gracefully

end


define add_web_appliance_to_load_balancers_gracefully
    sequence
        _if ${!appliance.warmed_up}
            sequence
                _add_web_appliance_to_load_balancers throttle: low
                appliance exec: await_warmed_up

        _add_web_appliance_to_load_balancers throttle: high